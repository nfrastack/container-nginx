#!/usr/bin/with-contenv bash

silent() {
  if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ];  then
    "$@"
  else
    "$@" > /dev/null 2>&1
  fi
}

### Set Debug Mode
if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ]; then
    set -x
fi

### Defaults
NGINX_AUTHENTICATION_BASIC_PASS=${NGINX_AUTHENTICATION_BASIC_PASS:-password}
NGINX_AUTHENTICATION_BASIC_USER=${NGINX_AUTHENTICATION_BASIC_USER:-admin}
NGINX_AUTHENTICATION_LDAP_ATTRIBUTE=${NGINX_AUTHENTICATION_LDAP_ATTRIBUTE:-"uid"}
NGINX_AUTHENTICATION_LDAP_FILTER=${NGINX_AUTHENTICATION_LDAP_FILTER:-"(objectClass=person)"}
NGINX_AUTHENTICATION_LDAP_GROUP_ATTRIBUTE=${NGINX_AUTHENTICATION_LDAP_GROUP_ATTRIBUTE:-"uniquemember"}
NGINX_AUTHENTICATION_LDAP_SCOPE=${NGINX_AUTHENTICATION_LDAP_SCOPE:-"sub"}
NGINX_AUTHENTICATION_LLNG_HANDLER_HOST=${NGINX_AUTHENTICATION_LLNG_HANDLER_HOST:-"llng-handler"}
NGINX_AUTHENTICATION_LLNG_HANDLER_PORT=${NGINX_AUTHENTICATION_LLNG_HANDLER_PORT:-"2884"}
NGINX_AUTHENTICATION_LLNG_ATTRIBUTE1=${NGINX_AUTHENTICATION_LLNG_ATTRIBUTE1:-"HTTP_AUTH_USER,uid,upstream_http_uid"}
NGINX_AUTHENTICATION_TITLE=${NGINX_AUTHENTICATION_TITLE:-"Please login"}
NGINX_AUTHENTICATION_TYPE=${NGINX_AUTHENTICATION_TYPE:-"NONE"}
NGINX_CLIENT_BODY_TIMEOUT=${NGINX_CLIENT_BODY_TIMEOUT:-60}
NGINX_COMPRESSION_BROTLI_LEVEL=${NGINX_COMPRESSION_BROTLI_LEVEL:-6}
NGINX_COMPRESSION_BROTLI_MIN_LENGTH=${NGINX_COMPRESSION_BROTLI_MIN_LENGTH:-20}
NGINX_COMPRESSION_BROTLI_TYPES=${NGINX_COMPRESSION_BROTLI_TYPES:-"text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml"}
NGINX_COMPRESSION_BROTLI_WINDOW=${NGINX_COMPRESSION_BROTLI_WINDOW:-"512k"}
NGINX_COMPRESSION_GZIP_BUFFERS=${NGINX_COMPRESSION_GZIP_BUFFERS:-"16 8k"}
NGINX_COMPRESSION_GZIP_DISABLE=${NGINX_COMPRESSION_GZIP_DISABLE:-"MSIE [1-6].(?!.*SV1)"}
NGINX_COMPRESSION_GZIP_HTTP_VERSION=${NGINX_COMPRESSION_GZIP_HTTP_VERSION:-"1.1"}
NGINX_COMPRESSION_GZIP_LEVEL=${NGINX_COMPRESSION_GZIP_LEVEL:-6}
NGINX_COMPRESSION_GZIP_MIN_LENGTH=${NGINX_COMPRESSION_GZIP_MIN_LENGTH:-10240}
NGINX_COMPRESSION_GZIP_PROXIED=${NGINX_COMPRESSION_GZIP_PROXIED:-"expired no-cache no-store private auth"}
NGINX_COMPRESSION_GZIP_TYPES=${NGINX_COMPRESSION_GZIP_TYPES:-"text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml"}
NGINX_COMPRESSION_GZIP_VARY=${NGINX_COMPRESSION_GZIP_VARY:-"TRUE"}
NGINX_DDOS_CONNECTIONS_PER_IP=${NGINX_DDOS_CONNECTIONS_PER_IP:-"10m"}
NGINX_DDOS_REQUESTS_PER_IP=${NGINX_DDOS_REQUESTS_PER_IP:-"5r/s"}
NGINX_ENABLE_APPLICATION_CONFIGURATION=${NGINX_ENABLE_APPLICATION_CONFIGURATION:-"TRUE"}
NGINX_ENABLE_COMPRESSION_BROTLI=${NGINX_ENABLE_COMPRESSION_BROTLI:-"TRUE"}
NGINX_ENABLE_COMPRESSION_GZIP=${NGINX_ENABLE_COMPRESSION_GZIP:-"TRUE"}
NGINX_ENABLE_CREATE_SAMPLE_HTML=${NGINX_ENABLE_CREATE_SAMPLE_HTML:-"TRUE"}
NGINX_ENABLE_DDOS_PROTECTION=${NGINX_ENABLE_DDOS_PROTECTION:-"FALSE"}
NGINX_ENABLE_EPOLL=${NGINX_ENABLE_EPOLL:-"TRUE"}
NGINX_ENABLE_EXPLOIT_PROTECTION=${NGINX_ENABLE_EXPLOIT_PROTECTION:-"TRUE"}
NGINX_ENABLE_FASTCGI_HTTPS=${NGINX_ENABLE_FASTCGI_HTTPS:-"FALSE"}
NGINX_ENABLE_MULTI_ACCEPT=${NGINX_ENABLE_MULTI_ACCEPT:-"TRUE"}
NGINX_ENABLE_OPEN_FILE_CACHE=${NGINX_ENABLE_OPEN_FILE_CACHE:-"TRUE"}
NGINX_ENABLE_OPEN_FILE_CACHE_ERRORS=${NGINX_ENABLE_OPEN_FILE_CACHE_ERRORS:-"TRUE"}
NGINX_ENABLE_RESET_TIMEDOUT_CONNECTION=${NGINX_ENABLE_RESET_TIMEDOUT_CONNECTION:-"TRUE"}
NGINX_ENABLE_REVERSE_PROXY=${NGINX_ENABLE_REVERSE_PROXY:-"TRUE"}
NGINX_ENABLE_SENDFILE=${NGINX_ENABLE_SENDFILE:-"TRUE"}
NGINX_ENABLE_SERVER_TOKENS=${NGINX_ENABLE_SERVER_TOKENS:-"FALSE"}
NGINX_ENABLE_SITE_OPTIMIZATION=${NGINX_ENABLE_SITE_OPTIMIZATION:-"TRUE"}
NGINX_ENABLE_TCPNODELAY=${NGINX_ENABLE_TCPDELAY:-"TRUE"}
NGINX_ENABLE_TCPNOPUSH=${NGINX_ENABLE_TCPNOPUSH:-"TRUE"}
NGINX_KEEPALIVE_REQUESTS=${NGINX_KEEPALIVE_REQUESTS:-100000}
NGINX_KEEPALIVE_TIMEOUT=${NGINX_KEEPALIVE_TIMEOUT:-75}
NGINX_LISTEN_PORT=${NGINX_LISTEN_PORT:-80}
NGINX_LOG_ACCESS_FILE=${NGINX_LOG_ACCESS_FILE:-"access.log"}
NGINX_LOG_ACCESS_LOCATION=${NGINX_LOG_ACCESS_LOCATION:-"/www/logs/nginx"}
NGINX_LOG_ERROR_FILE=${NGINX_LOG_ERROR_FILE:-"error.log"}
NGINX_LOG_ERROR_LOCATION=${NGINX_LOG_ERROR_LOCATION:-"/www/logs/nginx"}
NGINX_LOG_LEVEL_ERROR=${NGINX_LOG_LEVEL_ERROR:-"warn"}
NGINX_MODE=${NGINX_MODE:-"NORMAL"}
NGINX_OPEN_FILE_CACHE_ERRORS=${NGINX_OPEN_FILE_CACHE_ERRORS:-"on"}
NGINX_OPEN_FILE_CACHE_INACTIVE=${NGINX_OPEN_FILE_CACHE_INACTIVE:-"5m"}
NGINX_OPEN_FILE_CACHE_MAX=${NGINX_OPEN_FILE_CACHE_MAX:-200000}
NGINX_OPEN_FILE_CACHE_MIN_USES=${NGINX_OPEN_FILE_CACHE_MIN_USES:-2}
NGINX_OPEN_FILE_CACHE_VALID=${NGINX_OPEN_FILE_CACHE_VALID:-"2m"}
NGINX_REAL_IP_HEADER=${NGINX_REAL_IP_HEADER:-"X-Forwarded-For"}
NGINX_SEND_TIMEOUT=${NGINX_SEND_TIMEOUT:-60}
NGINX_SET_REAL_IP_FROM=${NGINX_SET_REAL_IP_FROM:-"172.16.0.0/12"}
NGINX_UPLOAD_MAX_SIZE=${NGINX_UPLOAD_MAX_SIZE:-"2G"}
NGINX_USER=${NGINX_USER:-"nginx"}
NGINX_GROUP=${NGINX_GROUP:-"www-data"}
NGINX_WEBROOT=${NGINX_WEBROOT:-"/www/html"}
NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-"1024"}
NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-"auto"}
NGINX_WORKER_RLIMIT_NOFILE=${NGINX_WORKER_RLIMIT_NOFILE:-100000}
STAGE=${STAGE:-"DEVELOP"}
FORCE_RESET_PERMISSIONS=${FORCE_RESET_PERMISSIONS:-"TRUE"}

### Parse Configuration
sed -i -e "s#<ACCESS_LOG>#${NGINX_LOG_ACCESS_FILE}#g" /etc/nginx/nginx.conf
sed -i -e "s#<ACCESS_LOG_LOCATION>#${NGINX_LOG_ACCESS_LOCATION}#g" /etc/nginx/nginx.conf
sed -i -e "s#<CLIENT_BODY_TIMEOUT>#${NGINX_CLIENT_BODY_TIMEOUT}#g" /etc/nginx/nginx.conf
sed -i -e "s#<ERROR_LOG>#${NGINX_LOG_ERROR_FILE}#g" /etc/nginx/nginx.conf
sed -i -e "s#<ERROR_LOG_LEVEL>#${NGINX_LOG_LEVEL_ERROR}#g" /etc/nginx/nginx.conf
sed -i -e "s#<ERROR_LOG_LOCATION>#${NGINX_LOG_ERROR_LOCATION}#g" /etc/nginx/nginx.conf
sed -i -e "s#<GROUP>#${NGINX_GROUP}#g" /etc/nginx/nginx.conf
sed -i -e "s#<KEEPALIVE_REQUESTS>#${NGINX_KEEPALIVE_REQUESTS}#g" /etc/nginx/nginx.conf
sed -i -e "s#<KEEPALIVE_TIMEOUT>#${NGINX_KEEPALIVE_TIMEOUT}#g" /etc/nginx/nginx.conf
sed -i -e "s#<SEND_TIMEOUT>#${NGINX_SEND_TIMEOUT}#g" /etc/nginx/nginx.conf
sed -i -e "s#<UPLOAD_MAX_SIZE>#${NGINX_UPLOAD_MAX_SIZE}#g" /etc/nginx/nginx.conf
sed -i -e "s#<USER>#${NGINX_USER}#g" /etc/nginx/nginx.conf
sed -i -e "s#<WORKER_CONNECTIONS>#${NGINX_WORKER_CONNECTIONS}#g" /etc/nginx/nginx.conf
sed -i -e "s#<WORKER_PROCESSES>#${NGINX_WORKER_PROCESSES}#g" /etc/nginx/nginx.conf
sed -i -e "s#<WORKER_RLIMIT_NOFILE>#${NGINX_WORKER_RLIMIT_NOFILE}#g" /etc/nginx/nginx.conf

if [ "$NGINX_ENABLE_COMPRESSION_BROTLI" = "TRUE" ]; then
  sed -i -e "s#<BROTLI_LEVEL>#${NGINX_COMPRESSION_BROTLI_LEVEL}#g" /etc/nginx/nginx.conf.d/compression_brotli.conf
  sed -i -e "s#<BROTLI_MIN_LENGTH>#${NGINX_COMPRESSION_BROTLI_MIN_LENGTH}#g" /etc/nginx/nginx.conf.d/compression_brotli.conf
  sed -i -e "s#<BROTLI_TYPES>#${NGINX_COMPRESSION_BROTLI_TYPES}#g" /etc/nginx/nginx.conf.d/compression_brotli.conf
  sed -i -e "s#<BROTLI_WINDOW>#${NGINX_COMPRESSION_BROTLI_WINDOW}#g" /etc/nginx/nginx.conf.d/compression_brotli.conf
else
  sed -i -e "\#include/etc/nginx/nginx.conf.d/compression_brotli.conf;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_COMPRESSION_GZIP" = "TRUE" ]; then
  sed -i -e "s#<GZIP_BUFFERS>#${NGINX_COMPRESSION_GZIP_BUFFERS}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i -e "s#<GZIP_DISABLE>#${NGINX_COMPRESSION_GZIP_DISABLE}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i -e "s#<GZIP_HTTP_VERSION>#${NGINX_COMPRESSION_GZIP_HTTP_VERSION}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf  
  sed -i -e "s#<GZIP_LEVEL>#${NGINX_COMPRESSION_GZIP_LEVEL}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i -e "s#<GZIP_MIN_LENGTH>#${NGINX_COMPRESSION_GZIP_MIN_LENGTH}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i -e "s#<GZIP_PROXIED>#${NGINX_COMPRESSION_GZIP_PROXIED}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i -e "s#<GZIP_TYPES>#${NGINX_COMPRESSION_GZIP_TYPES}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  if [ "$NGINX_COMPRESSION_GZIP_VARY" != "TRUE" ]; then
    sed -i -e "\#gzip_vary on;#d" /etc/nginx/nginx.conf.d/compression_gzip.conf  
  fi
else
  sed -i -e "\#include /etc/nginx/nginx.conf.d/compression_gzip.conf;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_DDOS_PROTECTION" = "TRUE" ]; then
  sed -i -e "s#<DDOS_CONNECTIONS_PER_IP>#${NGINX_DDOS_CONNECTIONS_PER_IP}#g" /etc/nginx/nginx.conf.d/ddos_protection.conf
  sed -i -e "s#<DDOS_REQUESTS_PER_IP>#${NGINX_DDOS_REQUESTS_PER_IP}#g" /etc/nginx/nginx.conf.d/ddos_protection.conf
else
  sed -i -e "\#include /etc/nginx/nginx.conf.d/ddos_protection.conf;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_EPOLL" != "TRUE" ]; then
  sed -i -e "\#use_epoll;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_EXPLOIT_PROTECTION" != "TRUE" ]; then
  sed -i -e "\#include /etc/nginx/nginx.conf.d/exploit_protection.conf;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_MULTI_ACCEPT" != "TRUE" ]; then
  sed -i -e "\#multi_accept on;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_OPEN_FILE_CACHE" = "TRUE" ]; then
  sed -i -e "s#<OPEN_FILE_CACHE_MAX>#${NGINX_OPEN_FILE_CACHE_MAX}#g" /etc/nginx/nginx.conf.d/open_file_cache.conf
  sed -i -e "s#<OPEN_FILE_CACHE_INACTIVE>#${NGINX_OPEN_FILE_CACHE_INACTIVE}#g" /etc/nginx/nginx.conf.d/open_file_cache.conf
  sed -i -e "s#<OPEN_FILE_CACHE_VALID>#${NGINX_OPEN_FILE_CACHE_VALID}#g" /etc/nginx/nginx.conf.d/open_file_cache.conf
  sed -i -e "s#<OPEN_FILE_CACHE_MIN_USES>#${NGINX_OPEN_FILE_CACHE_MIN_USES}#g" /etc/nginx/nginx.conf.d/open_file_cache.conf
  sed -i -e "\#open_file_cache_errors on;#d" /etc/nginx/nginx.conf.d/open_file_cache.conf
else
  sed -i -e "\#include /etc/nginx/nginx.conf.d/open_file_cache.conf;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_RESET_TIMEDOUT_CONNECTION" != "TRUE" ]; then
  sed -i -e "\#reset_timedout_connection#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_REVERSE_PROXY" = "TRUE" ]; then
  sed -i -e "s#<REAL_IP_HEADER>#${NGINX_REAL_IP_HEADER}#g" /etc/nginx/nginx.conf.d/reverse_proxy.conf
  sed -i -e "s#<SET_REAL_IP_FROM>#${NGINX_SET_REAL_IP_FROM}#g" /etc/nginx/nginx.conf.d/reverse_proxy.conf
else
  sed -i -e "\#include /etc/nginx/nginx.conf.d/reverse_proxy.conf;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_SENDFILE" != "TRUE" ]; then
  sed -i -e "\#sendfile#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_SITE_OPTIMIZATION" != "TRUE" ]; then
  sed -i -e "\#include /etc/nginx/nginx.conf.d/site_optimization.conf;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_SERVER_TOKENS" != "TRUE" ]; then
  sed -i -e "\#server_tokens off;#d" /etc/nginx/nginx.conf
  sed -i -e "\#more_clear_headers Server;#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_TCPNOPUSH" != "TRUE" ]; then
  sed -i -e "\#tcp_nopush#d" /etc/nginx/nginx.conf
fi

if [ "$NGINX_ENABLE_TCPNODELAY" != "TRUE" ]; then
  sed -i -e "\#tcp_nodelay#d" /etc/nginx/nginx.conf
fi

if [ "$ENABLE_ZABBIX" != "TRUE" ]; then
  sed -i -e "\#include /etc/nginx/nginx.conf.d/zabbix.conf;#d" /etc/nginx/nginx.conf
fi

case "$NGINX_MODE" in
  "MAINTENANCE")
    echo "** [nginx] MAINTENANCE MODE ACTIVATED - THIS IMAGE WILL NOT SERVE PAGES"
    mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.template
    mv /etc/nginx/conf.d/maintenance.template /etc/nginx.conf.d/maintenance.conf
  ;;
  "NORMAL")
    :
  ;;
  "REDIRECT")
    if [ ! -n "$NGINX_REDIRECT_URL" ]; then
      echo '** [nginx] ERROR: No NGINX_REDIRECT_URL Set!'
      exit 1
    fi
    
    NGINX_ENABLE_CREATE_SAMPLE_HTML=FALSE

    sed -i "s#rewrite \^/(\.\*) .*#rewrite ^/(\.\*) ${NGINX_REDIRECT_URL};#g" /etc/nginx/conf.d/redirect.template 

    echo "** [nginx] Redirect Mode Activated - Redirecting all traffic to ${NGINX_REDIRECT_URL}"
    mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.template
    mv /etc/nginx/conf.d/redirect.template /etc/nginx/conf.d/redirect.conf
  ;;
  *)
    :
  ;;
esac

if [ "$NGINX_ENABLE_APPLICATION_CONFIGURATION" = "TRUE" ]; then
## Configure default.conf
  ### Map Authentication
  case "$NGINX_AUTHENTICATION_TYPE" in
      "BASIC")
        echo "** [nginx] Setting Basic Authentication"
        user_num=`printenv | sort | grep '\NGINX_AUTHENTICATION_BASIC_USER.*' | wc -l`
        for (( i = 1; i <= $user_num; i++ ))
          do
            basic_user=NGINX_AUTHENTICATION_BASIC_USER${i}
            basic_pass=NGINX_AUTHENTICATION_BASIC_PASS${i}
            echo "** [nginx] Creating User: ${!basic_user}"
            htpasswd -b -n ${!basic_user:-$NGINX_AUTHENTICATION_BASIC_USER} ${!basic_pass:-$NGINX_AUTHENTICATION_BASIC_PASS} >> /etc/nginx/nginx.conf.d/authentication/basic_authorized_users
            sed -i '/ server {/a\ \ \  auth_basic "'"${NGINX_AUTHENTICATION_TITLE}"'";\n\ \ \  auth_basic_user_file /etc/nginx/nginx.conf.d/authentication/basic_authorized_users;' /etc/nginx/conf.d/*.conf
          done
      ;;
      "LDAP")
      cat <<EOF > /etc/nginx/nginx.conf.d/authentication/ldap_configuration
        ldap_server ldapserver {
        url "$NGINX_AUTHENTICATION_LDAP_HOST/$NGINX_AUTHENTICATION_LDAP_BASE_DN?$NGINX_AUTHENTICATION_LDAP_ATTRIBUTE?$NGINX_AUTHENTICATION_LDAP_SCOPE?$NGINX_AUTHENTICATION_LDAP_FILTER";
        binddn "$NGINX_AUTHENTICATION_LDAP_BIND_DN";
        binddn_passwd $NGINX_AUTHENTICATION_LDAP_BIND_PW;
        group_attribute $NGINX_AUTHENTICATION_LDAP_GROUP_ATTRIBUTE;
        group_attribute_is_dn on;
        require valid_user;
        satisfy all;
      }
EOF
        sed -i '/ server {/a\ \ \  auth_ldap "${NGINX_AUTHENTICATION_TITLE}"; auth_ldap_servers ldapserver;' /etc/nginx/conf.d/*.conf
        sed -i "\#include /etc/nginx/conf.d/#i\ \ \ \ include /etc/nginx/nginx.conf.d/authentication/ldap_configuration;" /etc/nginx/nginx.conf
      ;;
      "LLNG")
          sed -i "s#<LLNG_HANDLER_HOST>#$NGINX_AUTHENTICATION_LLNG_HANDLER_HOST#g" /etc/nginx/nginx.conf.d/authentication/llng
          sed -i "s#<LLNG_HANDLER_PORT>#$NGINX_AUTHENTICATION_LLNG_HANDLER_PORT#g" /etc/nginx/nginx.conf.d/authentication/llng
          echo "** [nginx] Setting LLNG Authentication"

          header_num=`printenv | sort | grep '\NGINX_AUTHENTICATION_LLNG_ATTRIBUTE.*' | wc -l`
            for (( i = 1; i <= $header_num; i++ ))
                do
                  headers=NGINX_AUTHENTICATION_LLNG_ATTRIBUTE${i}
                  IFS=',' read -r -a array <<< "${!headers}"

                  echo "** [nginx] Updating Nginx to support recieving attribute from LLNG: '${array[0]}'"

                  echo "fastcgi_param ${array[0]} \$${array[1]};" >> /etc/nginx/nginx.conf.d/authentication/llng_params
                  echo "auth_request_set \$${array[1]} \$${array[2]};" >> /etc/nginx/nginx.conf.d/authentication/llng_auth_request
            done

          sed -i '/server {/a\ \ \ \ \  include /etc/nginx/nginx.conf.d/authentication/llng;' /etc/nginx/conf.d/*.conf
          sed -i '/location \/ {/a\ \ \ \ \ \ \ \ include /etc/nginx/nginx.conf.d/authentication/llng_auth_request;' /etc/nginx/conf.d/*.conf
          sed -i '/include \/etc\/nginx\/nginx.conf.d\/php-fpm.conf;/a\ \ \ \ \ \ \ \ include \/etc\/nginx\/nginx.conf.d\/authentication\/llng_auth_request;' /etc/nginx/conf.d/*.conf
      ;;
      "NONE")
        :
      ;;
     *)
        echo "** [nginx] Unknown AUTHENTICATION_TYPE option. Relying on Application Authentication"
     ;;
  esac

  silent sed -i -e "s#<WEBROOT>#${NGINX_WEBROOT}#g" /etc/nginx/conf.d/*.conf
  silent sed -i -e "s#<LISTEN_PORT>#${NGINX_LISTEN_PORT}#g" /etc/nginx/conf.d/*.conf
  silent sed -i -e "s#<WEBROOT>#${NGINX_WEBROOT}#g" /etc/nginx/conf.d/*.template
  silent sed -i -e "s#<LISTEN_PORT>#${NGINX_LISTEN_PORT}#g" /etc/nginx/conf.d/*.template

  if [[ -v NGINX_INCLUDE_CONFIGURATION ]] ; then
    sed -i "\|### Don't edit past here|a\ \ \ \ \  include ${NGINX_INCLUDE_CONFIGURATION};" /etc/nginx/conf.d/*.conf
  fi

  ### Perform Nginx FastCGI reverse proxy modifications
  if [ "NGINX_ENABLE_FASTCGI_HTTPS" = "TRUE" ]; then
    echo "** [nginx] Enable Nginx FastCGI HTTPS Termination Support"
    echo "fastcgi_param  HTTPS 'on';" >> /etc/nginx/fastcgi_params
    PROTOCOL="https://"
  else
    echo "** [nginx] Disable Nginx FastCGI HTTPS Termination Support"
    echo "fastcgi_param  HTTPS 'off';" >> /etc/nginx/fastcgi_params
    PROTOCOL="http://"
  fi
else 
  echo "** [nginx] Not configurating application / default.conf files"
fi

### Set Stage for Future Development and Production Purposes
case "$STAGE" in
  "DEVELOP" | "develop" )
    echo 'fastcgi_param STAGE "DEVELOP";' >> /etc/nginx/fastcgi_params
  ;;
  "PRODUCTION" | "production" | "STAGING" | "staging")
    echo 'fastcgi_param STAGE "PRODUCTION";' >> /etc/nginx/fastcgi_params
  ;;
  *)
    echo 'fastcgi_param STAGE "DEVELOP";' >> /etc/nginx/fastcgi_params
  ;;
esac

#### Create Sample HTML File if doesn't exist
if [ "$NGINX_ENABLE_CREATE_SAMPLE_HTML" = "TRUE" ]; then
  if [ ! -f "${NGINX_WEBROOT}/index.html" ] ; then
     echo "** [nginx] Creating sample index.html"
     mkdir -p ${NGINX_WEBROOT}
     cat <<EOF > ${NGINX_WEBROOT}/index.html
  <html>
  <title>Default Page</title>
  <h2>Container is working</h2>
  Congratulations! Your Nginx image is working. You are seeing this because you don't have an index.html file in your ${NGINX_WEBROOT} directory.
  </html>
EOF
  fi
fi

### Force Reset Permissions for Accessibility
mkdir -p "${NGINX_WEBROOT}"
if [ "${FORCE_RESET_PERMISSIONS}" == "TRUE"  ]; then
    chown -R ${NGINX_USER}:${NGINX_GROUP} ${NGINX_WEBROOT}
fi

### Create Log Directories
mkdir -p "${NGINX_LOG_ERROR_LOCATION}" "${NGINX_LOG_ACCESS_LOCATION}"
chown -R "${NGINX_USER}" "${NGINX_LOG_ERROR_LOCATION}" "${NGINX_LOG_ACCESS_LOCATION}"

### Update Logrotate
sed -i -e "s#<ERROR_LOG_LOCATION>#${NGINX_LOG_ERROR_LOCATION}#g" /etc/logrotate.d/nginx
sed -i -e "s#<ACCESS_LOG_LOCATION>#${NGINX_LOG_ACCESS_LOCATION}#g" /etc/logrotate.d/nginx
sed -i -e "s#<ACCESS_LOG_LOCATION>#${NGINX_LOG_ACCESS_LOCATION}#g" /etc/nginx/nginx.conf.d/exploit_protection.conf

### Create Temporary Files
mkdir -p /tmp/nginx
chown -R "${NGINX_USER}" /tmp/nginx

touch /tmp/state/09-nginx
